(in-package :compiler)

(defun optimize1-let (ir lexenv)
  (let* ((bindings (ir-arg1 ir))
         (lexenv (append bindings lexenv)))
    (dolist (b bindings)
      (let ((binding (first b)))
        (setf (binding-used-count binding) 0)))
    (let ((body
            (mapcar (lambda (ir1)
                      (optimize1 ir1 lexenv))
                    (ir-arg2 ir)))
          (bindings
            (remove-if (lambda (b)
                         (zerop (binding-used-count (first b))))
                       (ir-arg1 ir))))
      (cond (bindings
             (make-ir 'let
                      (ir-return-value-p ir)
                      (ir-multiple-values-p ir)
                      bindings
                      body))
            ((null (cdr body))
             (first body))
            (t
             (make-ir 'progn
                      (ir-return-value-p ir)
                      (ir-multiple-values-p ir)
                      body))))))

(defun optimize1-call (ir lexenv)
  (make-ir (ir-op ir)
           (ir-return-value-p ir)
           (ir-multiple-values-p ir)
           (ir-arg1 ir)
           (mapcar (lambda (ir) (optimize1 ir lexenv))
                   (ir-arg2 ir))))

(defun const-value-p (ir)
  (eq 'const (ir-op ir)))

(defun optimize1 (ir lexenv)
  (ecase (ir-op ir)
    ((const) ir)
    ((lref)
     (let ((elt (assoc (ir-arg1 ir) lexenv)))
       (cond ((and elt (const-value-p (second elt)))
              (second elt))
             (t
              (incf (binding-used-count (ir-arg1 ir)))
              ir))))
    ((gref) ir)
    ((lset) ir)
    ((gset) ir)
    ((if) ir)
    ((progn) ir)
    ((lambda) ir)
    ((let)
     (optimize1-let ir lexenv))
    ((lcall call)
     (optimize1-call ir lexenv))
    ((unwind-protect) ir)
    ((block) ir)
    ((return-from) ir)
    ((tagbody) ir)
    ((go) ir)
    ((catch) ir)
    ((throw) ir)
    ((*:%defun) ir)
    ((*:%defpackage) ir)
    ((*:%in-package) ir)
    ((ffi:ref) ir)
    ((ffi:set) ir)
    ((ffi:var) ir)
    ((ffi:typeof) ir)
    ((ffi:new) ir)
    ((ffi:aget) ir)
    ((js-call) ir)
    ((module) ir)))
