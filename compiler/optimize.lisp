(in-package :compiler)

(defun const-value-p (ir)
  (eq 'const (ir-op ir)))

(defun immutable-form-p (ir)
  (const-value-p ir))

(defun remake-ir (op ir &rest args)
  (apply #'make-ir op (ir-return-value-p ir) (ir-multiple-values-p ir) args))

(defun optimize1-let (ir lexenv)
  (let* ((bindings (ir-arg1 ir))
         (lexenv (append bindings lexenv)))
    (dolist (b bindings)
      (let ((binding (first b)))
        (setf (binding-used-count binding) 0)))
    (let ((body
            (mapcar (lambda (ir1)
                      (optimize1 ir1 lexenv))
                    (ir-arg2 ir))))
      (let ((before-forms '())
            (bindings '()))
        ;; 束縛した変数は使っていないが値に副作用がある場合は値の式だけを残す, before-formsはその式のリスト
        ;; 例: (let ((x (f))) nil) -> (progn (f) nil)
        ;; 束縛した変数を使っていない、かつ値が副作用のない式なら消す
        ;; 例: (let ((x 0)) 'form) -> 'form
        (dolist (b (ir-arg1 ir))
          (cond ((plusp (binding-used-count (first b)))
                 (push b bindings))
                ((not (immutable-form-p (second b)))
                 (push (second b) before-forms))))
        (setq bindings (nreverse bindings)
              body (nconc (nreverse before-forms) body))
        (cond (bindings
               (remake-ir 'let ir bindings body))
              ((null (cdr body))
               ;; 束縛する変数がなく本体が単一の式ならその式だけにする
               (first body))
              (t
               ;; 束縛する変数がなく本体が複数の式ならprognにする
               (remake-ir 'progn ir body)))))))

(defun optimize1-call (ir lexenv)
  (remake-ir (ir-op ir)
             ir
             (ir-arg1 ir)
             (mapcar (lambda (ir) (optimize1 ir lexenv))
                     (ir-arg2 ir))))

(defun optimize1 (ir lexenv)
  (ecase (ir-op ir)
    ((const) ir)
    ((lref)
     (let ((elt (assoc (ir-arg1 ir) lexenv)))
       (cond ((and elt (immutable-form-p (second elt)))
              (second elt))
             (t
              (incf (binding-used-count (ir-arg1 ir)))
              ir))))
    ((gref) ir)
    ((lset) ir)
    ((gset) ir)
    ((if) ir)
    ((progn) ir)
    ((lambda) ir)
    ((let)
     (optimize1-let ir lexenv))
    ((lcall call)
     (optimize1-call ir lexenv))
    ((unwind-protect) ir)
    ((block) ir)
    ((return-from) ir)
    ((tagbody) ir)
    ((go) ir)
    ((catch) ir)
    ((throw) ir)
    ((*:%defun) ir)
    ((*:%defpackage) ir)
    ((*:%in-package) ir)
    ((ffi:ref) ir)
    ((ffi:set) ir)
    ((ffi:var) ir)
    ((ffi:typeof) ir)
    ((ffi:new) ir)
    ((ffi:aget) ir)
    ((js-call) ir)
    ((module) ir)))
